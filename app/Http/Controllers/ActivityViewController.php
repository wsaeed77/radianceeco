<?php

namespace App\Http\Controllers;

use App\Enums\ActivityType;
use App\Enums\DocumentKind;
use App\Models\Activity;
use App\Models\Document;
use App\Models\Lead;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Inertia\Inertia;

class ActivityViewController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Display a listing of activities.
     */
    public function index()
    {
        $activities = Activity::with('lead', 'user')->latest()->paginate(20);
        
        return Inertia::render('Activities/Index', [
            'activities' => $activities,
        ]);
    }

    /**
     * Show the form for creating a new activity for a lead.
     */
    public function create($leadId)
    {
        $lead = Lead::findOrFail($leadId);
        $activityTypes = ActivityType::userSelectable();
        
        return view('activities.create', compact('lead', 'activityTypes'));
    }

    /**
     * Store a newly created activity.
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'lead_id' => 'required|string|exists:leads,id',
            'type' => 'required|string',
            'description' => 'required|string|max:255',
            'message' => 'nullable|string',
            'document' => 'nullable|file|max:10240',
            'document_kind' => 'required_with:document|string',
        ]);
        
        $lead = Lead::findOrFail($validated['lead_id']);
        
        // Validate activity type
        try {
            $type = ActivityType::from($validated['type']);
        } catch (\ValueError $e) {
            return back()->withErrors(['type' => 'Invalid activity type selected.']);
        }
        
        // Prevent manual creation of automatic activity types
        if ($type->isAutomatic()) {
            return back()->withErrors(['type' => 'This activity type is automatically generated by the system.']);
        }
        
        // Create activity record
        $activity = Activity::create([
            'lead_id' => $lead->id,
            'user_id' => Auth::id(),
            'type' => $type->value,
            'description' => $validated['description'],
            'message' => $validated['message'] ?? null,
            'created_by' => Auth::id(),
        ]);
        
        // Handle document upload if provided
        if ($request->hasFile('document') && !empty($validated['document_kind'])) {
            try {
                $kind = DocumentKind::from($validated['document_kind']);
            } catch (\ValueError $e) {
                return back()->withErrors(['document_kind' => 'Invalid document type selected.']);
            }
            
            $file = $request->file('document');
            $originalName = $file->getClientOriginalName();
            $fileName = Str::slug(pathinfo($originalName, PATHINFO_FILENAME)) . '-' . Str::random(8) . '.' . $file->getClientOriginalExtension();
            
            // Define the storage path
            $path = "documents/{$lead->id}/{$kind->value}/{$fileName}";
            
            // Store the file
            $stored = Storage::disk('public')->put($path, file_get_contents($file));
            
            if ($stored) {
                // Create document record
                Document::create([
                    'lead_id' => $lead->id,
                    'activity_id' => $activity->id,
                    'kind' => $kind->value,
                    'name' => $originalName,
                    'disk' => 'public',
                    'path' => $path,
                    'size_bytes' => $file->getSize(),
                    'uploaded_by' => Auth::id(),
                    'uploaded_at' => now(),
                ]);
            }
        }
        
        return redirect()->route('leads.show', $lead->id)
            ->with('success', 'Activity added successfully.')
            ->with('current_tab', 'activities');
    }

    /**
     * Show the form for editing the specified activity.
     */
    public function edit($id)
    {
        $activity = Activity::with('lead')->findOrFail($id);
        $activityTypes = ActivityType::cases();
        
        return view('activities.edit', compact('activity', 'activityTypes'));
    }

    /**
     * Update the specified activity.
     */
    public function update(Request $request, $id)
    {
        $activity = Activity::findOrFail($id);
        
        $validated = $request->validate([
            'type' => 'required|string',
            'description' => 'required|string|max:255',
            'message' => 'nullable|string',
        ]);
        
        // Validate activity type
        try {
            $type = ActivityType::from($validated['type']);
        } catch (\ValueError $e) {
            return back()->withErrors(['type' => 'Invalid activity type selected.']);
        }
        
        // Update activity
        $activity->update([
            'type' => $type->value,
            'description' => $validated['description'],
            'message' => $validated['message'] ?? null,
        ]);
        
        return redirect()->route('leads.show', $activity->lead_id)
            ->with('success', 'Activity updated successfully.')
            ->with('current_tab', 'activities');
    }

    /**
     * Remove the specified activity.
     */
    public function destroy($id)
    {
        $activity = Activity::findOrFail($id);
        $leadId = $activity->lead_id;
        
        // Delete activity
        $activity->delete();
        
        return redirect()->route('leads.show', $leadId)
            ->with('success', 'Activity deleted successfully.')
            ->with('current_tab', 'activities');
    }
}